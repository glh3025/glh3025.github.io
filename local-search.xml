<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Generative Visual (4)</title>
    <link href="/2019/05/31/generative-visual/"/>
    <url>/2019/05/31/generative-visual/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>As a manga reader, I would be more delight to read colorized ones than gray-scaled ones. However, it takes much more additional efforts for manga creators to colorize. What if we have an auto painter that convert b&amp;w manga into colorized ones? In this project, I developed a manga colorization solution based on pix2pix model. It is capabale of colorizing b&amp;w manga pages based on some colorized samples. The future direction is to correct some inaccurate results and make them more natural.</p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p>Trained on ~150 Onepiece manga pages. Should be better if had more training data.</p><table><thead><tr><th align="center">real_A</th><th align="center">real_B</th><th align="center">fake_B</th></tr></thead><tbody><tr><td align="center"><img src="/generative-visual/imgs/0001-011.png_real_A.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0001-011.png_real_B_rgb.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0001-011.png_fake_B_rgb.png" width="250"></td></tr><tr><td align="center"><img src="/generative-visual/imgs/0002-012.png_real_A.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0002-012.png_real_B_rgb.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0002-012.png_fake_B_rgb.png" width="250"></td></tr><tr><td align="center"><img src="/generative-visual/imgs/0003-011.png_real_A.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0003-011.png_real_B_rgb.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0003-011.png_fake_B_rgb.png" width="250"></td></tr><tr><td align="center"><img src="/generative-visual/imgs/0004-011.png_real_A.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0004-011.png_real_B_rgb.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0004-011.png_fake_B_rgb.png" width="250"></td></tr><tr><td align="center"><img src="/generative-visual/imgs/0005-011.png_real_A.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0005-011.png_real_B_rgb.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0005-011.png_fake_B_rgb.png" width="250"></td></tr><tr><td align="center"><img src="/generative-visual/imgs/0006-011.png_real_A.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0006-011.png_real_B_rgb.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0006-011.png_fake_B_rgb.png" width="250"></td></tr><tr><td align="center"><img src="/generative-visual/imgs/0007-011.png_real_A.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0007-011.png_real_B_rgb.png" width="250"></td><td align="center"><img src="/generative-visual/imgs/0007-011.png_fake_B_rgb.png" width="250"></td></tr></tbody></table><h2 id="Model-Data"><a href="#Model-Data" class="headerlink" title="Model/Data"></a>Model/Data</h2><ul><li><a href="https://github.com/glh3025/ml-art-project4">github link</a></li><li>Takes ~10 min to train the model.</li><li>Training data is included in datasets/onepiece/A/.</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><ul><li><a href="/generative-visual/manga_colorization.html">manga_colorization.ipynb</a>: run this to simply regenerate the demonstrated results.  </li></ul><p>For various usage:</p><ul><li><p>train.py: </p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">python</span> <span class="hljs-comment">train</span><span class="hljs-string">.</span><span class="hljs-comment">py</span> --<span class="hljs-comment">dataroot</span> <span class="hljs-comment">path/to/datasets</span> --<span class="hljs-comment">name</span> <span class="hljs-comment">GIVE_A_NAME</span> --<span class="hljs-comment">model</span> <span class="hljs-comment">pix2pix</span> --<span class="hljs-comment">direction</span> <span class="hljs-comment">BtoA</span><br></code></pre></td></tr></table></figure></li><li><p>test.py:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">python</span> <span class="hljs-comment">test</span><span class="hljs-string">.</span><span class="hljs-comment">py</span> --<span class="hljs-comment">dataroot</span> <span class="hljs-comment">same/path/as/above</span> --<span class="hljs-comment">name</span> <span class="hljs-comment">SAME_NAME_AS_ABOVE</span> --<span class="hljs-comment">model</span> <span class="hljs-comment">pix2pix</span> --<span class="hljs-comment">direction</span> <span class="hljs-comment">BtoA</span><br></code></pre></td></tr></table></figure><h2 id="Technical-Notes"><a href="#Technical-Notes" class="headerlink" title="Technical Notes"></a>Technical Notes</h2></li><li><p>Tested on Datahub.</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://arxiv.org/pdf/1611.07004.pdf">pix2pix paper</a></li><li><a href="https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix">Pytorch implementation of pix2pix</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ML-Art</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Generative Audio (3)</title>
    <link href="/2019/05/17/generative-audio/"/>
    <url>/2019/05/17/generative-audio/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>In this project, a machine critic is built to give comments on several pictures. The critic is not intelligent enough to surpass describing the contents of pictures. However, it performs excellent tongue-twisters to beat human beings. The voice of the critic comes from two models, DeepVoice3 and Tacotron2, respectively.</p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p><img src="/generative-audio/results1/106.png" alt="ex.106">  </p><p>106 - DeepVoice3<br><audio controls="controls" preload="auto" src="/generative-audio/results1/106.wav"></audio></p><p>106 - Tacotron2<br><audio controls="controls" preload="auto" src="/generative-audio/results2/106.wav"></audio></p><p><img src="/generative-audio/results1/8.png" alt="ex.8">  </p><p>8 - DeepVoice3<br><audio controls="controls" preload="auto" src="/generative-audio/results1/8.wav"></audio></p><p>8 - Tacotron2<br><audio controls="controls" preload="auto" src="/generative-audio/results2/8.wav"></audio></p><p><img src="/generative-audio/results1/101.png" alt="ex.101">  </p><p>101 - DeepVoice3<br><audio controls="controls" preload="auto" src="/generative-audio/results1/101.wav"></audio></p><p>101 - Tacotron2<br><audio controls="controls" preload="auto" src="/generative-audio/results2/101.wav"></audio></p><p>Tongue-twister 1: Peter Piper picked a peck of pickled peppers. How many pickled peppers did Peter Piper pick?</p><p>DeepVoice3<br><audio controls="controls" preload="auto" src="/generative-audio/results1/tt1.wav"></audio></p><p>Tacotron2<br><audio controls="controls" preload="auto" src="/generative-audio/results2/tt1.wav"></audio></p><p>Tongue-twister 2: A skunk sat on a stump and thunk the stump stunk, but the stump thunk the skunk stunk.<br>DeepVoice3<br><audio controls="controls" preload="auto" src="/generative-audio/results1/tt2.wav"></audio></p><p>Tacotron2<br><audio controls="controls" preload="auto" src="/generative-audio/results2/tt2.wav"></audio></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><ul><li><a href="/generative-audio/DeepVoice3.html">DeepVoice3.ipynb</a> – The first voice</li><li><a href="/generative-audio/Tacotron2_and_WaveNet.html">Tacotron2_and_WaveNet.ipynb</a> – The second voice</li></ul><h2 id="Technical-Notes"><a href="#Technical-Notes" class="headerlink" title="Technical Notes"></a>Technical Notes</h2><ul><li>All the packages are included when running ipynb files.</li><li>Tested on Google Colab.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/r9y9/deepvoice3_pytorch">DeepVoice3 implementation</a></li><li><a href="https://r9y9.github.io/deepvoice3_pytorch/">DeepVoice3 Audio samples</a>, for details, click <a href="https://github.com/r9y9/deepvoice3_pytorch">here</a></li><li><a href="https://colab.research.google.com/github/r9y9/Colaboratory/blob/master/DeepVoice3_single_speaker_TTS_en_demo.ipynb">DeepVoice3 Google Colab example</a></li><li><a href="https://towardsdatascience.com/image-captioning-with-keras-teaching-computers-to-describe-pictures-c88a46a311b8">Image captioning</a></li><li><a href="https://github.com/Rayhane-mamah/Tacotron-2">Tacotron2 (mel-spectrogram prediction part)</a></li><li><a href="https://github.com/r9y9/wavenet_vocoder">WaveNet</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ML-Art</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Generative Sketching (2)</title>
    <link href="/2019/05/03/generative-sketching/"/>
    <url>/2019/05/03/generative-sketching/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>The idea of this project is to generate some characters “invented” by Sketch-rnn. The model is trained from ~10k Chinese characters used in Japan. These characters are decoded from random IID Gaussian latent vectors with temperature 0.1. They are orgnized in one paragraph to disguise as real ones.</p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p><img src="/generative-sketching/FakeHanzi.png" alt="What is this"></p><h2 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h2><ul><li><a href="/generative-sketching/FakeHanzi.html">FakeHanzi.ipynb</a> - guideline and executable code.</li><li>Checkpoint files are stored in my <a href="https://drive.google.com/drive/folders/1E3ZpsUOMhi8HFJqr7JHMONAwZktYCx-A?usp=sharing">google drive</a>.</li></ul><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul><li>Test on Google Colab.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/tensorflow/magenta/tree/master/magenta/models/sketch_rnn">Sketch-RNN</a>.<br><a href="https://github.com/hardmaru/sketch-rnn-datasets/tree/master/kanji">KanjiVG Dataset</a>.</p>]]></content>
    
    
    
    <tags>
      
      <tag>ML-Art</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Generative Text (1)</title>
    <link href="/2019/04/19/generative-text/"/>
    <url>/2019/04/19/generative-text/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>In this project, GPT-2 model is utilized on two tasks:</p><ol><li>Generating fake news by typing in desired article title, using fine-tuned model. The output is a markdown file which mimics real news article.</li><li>Generating jokes using different dataset. For each dataset, GPT-2 model is retrained. The jokes can be generated either with no input or with prime words.</li></ol><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><ol><li><p>Fake news: <a href="/generative-text/example-fakenews.pdf">example-fakenews.pdf</a></p></li><li><p>Jokes:<br> 2.1. Generated Reddit jokes example (Each paragraph below is a joke picked from various generated ones):</p><blockquote><p>A priest, an athletic trainer, and a psychologist walk into a bar.The bartender replies, “We do not serve Irishmen in here”</p></blockquote><blockquote><p>A report from London, England reveals that the opposite of Governmentally undertaken transportation might cause increases in driving years.80% of British drivers are still unaware that they are on railway track.</p></blockquote><blockquote><p>A man has a group of three gay people and one gives him a round of drinks before moving on to the next round. The first man settles down in front of his friend and one of the gasps goes, “Yeah, I figured.” He says “I’m gay.” the gay man nods “aaaawg I heard damn you.” Another man sighs. “I’m gay.” The third gay guy thinks for a moment and says “hmm, yeah well the group has a great laugh”. They settle down and leave the man on his hands and knees, looking delighted and happy.</p></blockquote><blockquote><p>The man and Math enters the room and soon they find it impossible to speak so they pick a silent window in the room.</p></blockquote><blockquote><p>Over the next few days, he continued to test the bunny, because he finally got his dose of medicine.<br> He took the medicine, and the bunny fell asleep almost as stupid as he was.<br> Morning came, and the bunny woke up from a hard waking on its way to the office.<br> “BAGHHAAHmmmm…I wake up!<br> I know.”<br> “Why?” asked the bunny.<br> “Because every time I ask you, “Why?”, you just nod your head and speak.<br> You see, for all those who beg you, “Why?”, the bunny takes out one cigarette lighter, and smoking it lets out a horrible fart. This is the reason why your grandfather will never die. If you don’t smoke, he’ll die too.</p></blockquote><p> 2.2 Generated StupidStuff jokes example (Each paragraph below is a joke picked from various generated ones):</p><blockquote><p>An American with an IQ of 120 could communicate with a Russian without the use of the Earth-orbiting Smherovlev detector. American technology even allowed American technology researchers to communicate with Russian technology researchers. But American technology researchers were not fool enough to trust Russian technology researchers. A year passed and another Russian research project was opened whose only accomplishment was to demonstrate the feasibility of sending horseshoe shaped magnets up the atmosphere for the experiment. Another Russian researcher, now with an IQ above 150, was appointed, he claimed, with a stick, to measure the feasibility of sending his magnet up the mountain. Sure enough, after a few weeks of testing, the magnet failed to measure up and fell to the ground. Later, another Russian researcher presented his magnet at the same measurement, but this time using a stick, he fell on his knees and endeavored to reach the top of the mountain. With his magnet still attached to his ground-based game, he demonstrated that experimentally harmful experiment with Russian technology. With great trepidation and great emotions Paolo and Iptical concluded that the experiment had failed.This American goes to consult with an Englishman. He tells us in his native language what he wants from Steve Jobs. </p></blockquote><blockquote><p>A guy goes to the top of the stairs to find his hairy wife scratching her head. “What’s so funny about that?” he asks. The wife replies, “When I was younger I didn’t date your father!”</p></blockquote><blockquote><p>A man walks into a bar with his wife. The guy says, “You’re beautiful, too.” The woman says, “It’s a cold one.” The guy says, “You’re cute, too.” The woman says, “You’re not.” The guy says, “Why not?” The man says, “You’re gorgeous, too.” The woman screams, “You’re so ugly, too.” The man says, “This must be why my wife keeps calling me Tom Cruise.”</p></blockquote></li></ol><h2 id="Guileline-Files"><a href="#Guileline-Files" class="headerlink" title="Guileline Files"></a>Guileline Files</h2><ul><li><a href="/generative-text/gpt2-fakenews.html">gpt2-fakenews.ipynb</a> - task 1 guideline</li><li><a href="/generative-text/gpt2-jokes.html">gpt2-jokes.ipynb</a> - task 2 guideline</li></ul><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul><li>All the requirements are included in ipynb guide files.</li><li>Tested on Google Colab.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/nshepperd/gpt-2">GPT-2 model</a></li><li><a href="https://github.com/taivop/joke-dataset">A dataset of English plaintext jokes</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ML-Art</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
